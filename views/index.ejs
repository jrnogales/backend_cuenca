<% layout('partials/layout') %>

<section class="toolbar">
  <form id="filtros" onsubmit="event.preventDefault()">
    <div class="group">
      <label>Seleccionar fechas</label>
      <input type="date" id="f-fecha">
    </div>

    <div class="group">
      <label>Adultos</label>
      <select id="f-adultos">
        <% for (let i=1;i<=10;i++){ %>
          <option value="<%= i %>" <%= i===2?'selected':'' %>><%= i %></option>
        <% } %>
      </select>
    </div>

    <div class="group">
      <label>Niños</label>
      <select id="f-ninos">
        <% for (let i=0;i<=10;i++){ %>
          <option value="<%= i %>"><%= i %></option>
        <% } %>
      </select>
    </div>

    <button id="btn-aplicar" class="btn-primary outline" type="button">Aplicar</button>
  </form>
</section>

<% if (error) { %>
  <div class="notice error"><%= error %></div>
<% } %>

<% if (!paquetes || paquetes.length===0) { %>
  <div class="notice">No hay paquetes disponibles por ahora.</div>
<% } %>

<section class="cards">
  <% (paquetes||[]).forEach(p => { 
      const pa = Number(p.precio_adulto||0);
      const pn = Number(p.precio_nino||0);
  %>
    <article class="card" 
      data-id="<%= p.codigo %>" 
      data-pa="<%= pa %>" 
      data-pn="<%= pn %>"
      data-img="<%= p.imagen || '' %>"
      data-title="<%= p.titulo %>">

      <div class="pic">
        <!-- Usar solo URL alojada en BD -->
        <img src="<%= p.imagen || '' %>" alt="<%= p.titulo %>" loading="lazy">
      </div>

      <div class="card-body">
        <h3 class="title"><%= p.titulo %></h3>

        <p class="meta">
          <span class="dot"></span> 
          <%= p.ciudad || 'Cuenca' %> · 
          <%= (p.duracion_horas || ((p.duracion_dias||1)*8)) %> h
        </p>

        <ul class="perks">
          <li><span class="icon">✔</span> Cancelación gratuita</li>
          <li><span class="icon">🕒</span> <%= (p.duracion_horas || ((p.duracion_dias||1)*8)) %> h</li>
        </ul>

        <div class="divider"></div>

        <div class="price-n-cta">
          <div class="prices">
            <div class="from">a partir de</div>
            <div class="usd">$<%= pa.toFixed(2) %> <span class="suffix">US$</span></div>
            <div class="note">El precio varía en función del número de personas por grupo</div>
          </div>

          <!-- Controles de cantidad -->
          <div class="qty">
            <label>Adultos</label>
            <input type="number" class="in-adultos" min="1" max="20" value="2">
          </div>
          <div class="qty">
            <label>Niños</label>
            <input type="number" class="in-ninos" min="0" max="20" value="0">
          </div>

          <div class="total">Total: <strong class="total-val">$0.00</strong></div>

          <!-- Botón Añadir al carrito -->
          <button class="btn-primary add-cart" type="button">Añadir al carrito</button>
        </div>
      </div>
    </article>
  <% }) %>
</section>

<script>
(function () {
  const KEY = 'ct_cart'; // carrito en localStorage

  function todayLocalISO() {
    const d = new Date();
    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());
    return d.toISOString().slice(0, 10);
  }

  const $adultSel = document.getElementById('f-adultos');
  const $ninoSel  = document.getElementById('f-ninos');
  const $fecha    = document.getElementById('f-fecha');
  const $apply    = document.getElementById('btn-aplicar');

  if ($fecha) {
    $fecha.min = todayLocalISO();
    if (!$fecha.value || $fecha.value < $fecha.min) $fecha.value = $fecha.min;
  }

  function calcCard(card){
    const pa = Number(card.dataset.pa || 0);
    const pn = Number(card.dataset.pn || 0);
    const inA = card.querySelector('.in-adultos');
    const inN = card.querySelector('.in-ninos');
    const totalEl = card.querySelector('.total-val');

    const A = Math.max(1, parseInt(inA?.value ?? '1', 10));
    const N = Math.max(0, parseInt(inN?.value ?? '0', 10));
    const total = (A * pa) + (N * pn);

    if (totalEl) totalEl.textContent = '$' + total.toFixed(2);
  }

  // --- NUEVO: fetch robusto para disponibilidad ---
  async function getRestantes(codigo, fecha) {
    const resp = await fetch(`/api/disponibilidad/${encodeURIComponent(codigo)}?fecha=${encodeURIComponent(fecha)}`, {
      headers: { 'Accept': 'application/json' },
    });
    const ct = resp.headers.get('content-type') || '';
    if (!resp.ok) {
      if (ct.includes('application/json')) { await resp.json().catch(()=>{}); }
      else { await resp.text().catch(()=>{}); }
      if (resp.status === 404) return 0;
      return 0;
    }
    if (!ct.includes('application/json')) return 0;
    const j = await resp.json();
    return Number(j.restantes || 0);
  }

  // --- util de LS ---
  function readCart(){
    try { return JSON.parse(localStorage.getItem(KEY) || '[]'); } catch { return []; }
  }

  // 🔔 NUEVO: dispara evento para que el mini-cart se re-renderice
  function emitCartUpdated(arr){
    document.dispatchEvent(new CustomEvent('ct:cart-updated', { detail: arr }));
  }

  // 🧮 NUEVO: totales y badge “1 por paquete”
  function computeTotals(arr){
    const subtotal = arr.reduce((s, it) => s + Number(it.total || 0), 0);
    const iva = +(subtotal * 0.15).toFixed(2);
    const total = +(subtotal + iva).toFixed(2);
    return { subtotal: +subtotal.toFixed(2), iva, total };
  }

  function writeCart(arr){
    localStorage.setItem(KEY, JSON.stringify(arr));
    // badge: 1 por ítem (no por personas)
    const count = arr.length;
    const badge = document.querySelector('[data-cart-count]');
    if (badge) {
      badge.textContent = count;
      badge.style.display = count > 0 ? 'inline-block' : 'none';
    }
    emitCartUpdated(arr);
  }

  // 👂 Ejemplo de render del mini-carrito (si ya tienes uno, solo asegúrate de escuchar ct:cart-updated)
  document.addEventListener('ct:cart-updated', (e)=>{
    const arr = e.detail || [];
    const mini = document.querySelector('[data-mini-cart]'); // <div data-mini-cart>…</div> en tu layout
    if (!mini) return;
    const { subtotal, iva, total } = computeTotals(arr);
    mini.querySelector('[data-subtotal]')?.replaceChildren(`$${subtotal.toFixed(2)}`);
    mini.querySelector('[data-iva]')?.replaceChildren(`$${iva.toFixed(2)}`);
    mini.querySelector('[data-total]')?.replaceChildren(`$${total.toFixed(2)}`);

    const list = mini.querySelector('[data-list]');
    if (list) {
      list.innerHTML = arr.map(it => `
        <div class="mini-item">
          <img src="${it.img || ''}" alt="${it.titulo || it.codigo}" />
          <div class="mi-body">
            <div class="mi-title">${it.codigo}</div>
            <div class="mi-meta">${it.fecha} · A:${it.adultos} · N:${it.ninos}</div>
            <div class="mi-price">$${(it.total||0).toFixed(2)}</div>
          </div>
        </div>
      `).join('');
    }
  });

  // ------- Cards -------
  document.querySelectorAll('.card[data-id]').forEach(card=>{
    const inA = card.querySelector('.in-adultos');
    const inN = card.querySelector('.in-ninos');
    if (inA) inA.value = parseInt($adultSel?.value ?? '2', 10);
    if (inN) inN.value = parseInt($ninoSel?.value ?? '0', 10);
    calcCard(card);

    inA?.addEventListener('input', ()=>calcCard(card));
    inN?.addEventListener('input', ()=>calcCard(card));

    const btnAdd = card.querySelector('.add-cart');
    btnAdd?.addEventListener('click', async ()=>{
      if (!$fecha?.value) { alert('Selecciona una fecha antes de añadir.'); return; }
      if ($fecha.value < $fecha.min) { $fecha.value = $fecha.min; }

      const pa = Number(card.dataset.pa || 0);
      const pn = Number(card.dataset.pn || 0);
      const A = Math.max(1, parseInt(inA?.value ?? '1', 10));
      const N = Math.max(0, parseInt(inN?.value ?? '0', 10));
      const totalLinea = (A * pa) + (N * pn);

      const item = {
        codigo: card.dataset.id,
        titulo: card.dataset.title || card.dataset.id,
        img:    card.dataset.img || '',
        fecha:  $fecha.value,
        adultos: A,
        ninos:   N,
        pa, pn,                 // guarda precios para recalcular sin recargar
        total: totalLinea       // línea con total
      };

      // Validar disponibilidad contra lo YA agregado + lo nuevo (por (codigo,fecha))
      const restantes = await getRestantes(item.codigo, item.fecha);
      const cart = readCart();
      const ya = cart
        .filter(x => x.codigo === item.codigo && x.fecha === item.fecha)
        .reduce((n, x)=> n + Number(x.adultos||0) + Number(x.ninos||0), 0);
      const solic = item.adultos + item.ninos;
      if (ya + solic > restantes) {
        const disp = Math.max(0, restantes - ya);
        alert(`No hay cupos suficientes para ${item.fecha}. Puedes agregar como máximo ${disp} más.`);
        return;
      }

      // ✅ Consolidar por (codigo+fecha): “cada paquete cuenta como uno”
      const idx = cart.findIndex(x => x.codigo === item.codigo && x.fecha === item.fecha);
      if (idx >= 0) {
        cart[idx].adultos += item.adultos;
        cart[idx].ninos   += item.ninos;
        cart[idx].total    = (cart[idx].adultos * cart[idx].pa) + (cart[idx].ninos * cart[idx].pn);
      } else {
        cart.push(item);
      }
      writeCart(cart);

      // feedback
      const prev = btnAdd.textContent;
      btnAdd.disabled = true;
      btnAdd.textContent = 'Añadido ✓';
      setTimeout(()=>{ btnAdd.textContent = prev; btnAdd.disabled = false; }, 800);
    });
  });

  $fecha?.addEventListener('change', ()=>{
    if ($fecha.value < $fecha.min) $fecha.value = $fecha.min;
    document.querySelectorAll('.card[data-id]').forEach(calcCard);
  });

  $apply?.addEventListener('click', ()=>{
    if ($fecha.value < $fecha.min) $fecha.value = $fecha.min;
    document.querySelectorAll('.card[data-id]').forEach(card=>{
      const inA = card.querySelector('.in-adultos');
      const inN = card.querySelector('.in-ninos');
      if (inA) inA.value = parseInt($adultSel?.value ?? '2', 10);
      if (inN) inN.value = parseInt($ninoSel?.value ?? '0', 10);
      calcCard(card);
    });
  });

  // inicializa badge + mini-cart al cargar
  const init = readCart();
  writeCart(init); // escribe para disparar el evento y actualizar UI
})();
</script>
